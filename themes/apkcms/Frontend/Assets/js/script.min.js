console.log("Script.js loaded successfully!");
const menuToggle = document.getElementById("menuToggle"),
    nav = document.querySelector(".nav"),
    searchInput = document.getElementById("searchInput"),
    searchBtn = document.querySelector(".search-btn"),
    navLinks = document.querySelectorAll(".nav-link"),
    downloadBtns = document.querySelectorAll(".download-btn"),
    updateBtns = document.querySelectorAll(".update-btn"),
    infoBtns = document.querySelectorAll(".info-btn"),
    tabBtns = document.querySelectorAll(".tab-btn"),
    filterBtns = document.querySelectorAll(".filter-btn"),
    header = document.getElementById("header"),
    searchOpen = document.getElementById("search-open"),
    menuItems = document.querySelectorAll(".menu-item"),
    clickableLinks = document.querySelectorAll(".clickable");

function performSearch(e) {
    console.log(`Searching for: ${e}`), searchBtn && (searchBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>'), setTimeout(() => {
        searchBtn && (searchBtn.innerHTML = '<i class="fas fa-search"></i>'), showSearchResults(e)
    }, 1e3)
}

function showSearchResults(e) {
    alert(`Search results for "${e}" will be displayed here.`)
}

function filterGames(e) {
    document.querySelectorAll(".game-card").forEach(t => {
        const n = t.getAttribute("data-category");
        "featured" === e || n === e ? (t.style.display = "block", t.style.animation = "fadeInUp 0.6s ease forwards") : t.style.display = "none"
    })
}

function filterApps(e) {
    document.querySelectorAll(".app-card").forEach(t => {
        const n = t.getAttribute("data-category");
        "featured" === e || n === e ? (t.style.display = "block", t.style.animation = "fadeInUp 0.6s ease forwards") : t.style.display = "none"
    })
}

function filterDownloads(e) {
    const t = document.querySelectorAll(".download-item"),
        n = {
            week: [{
                name: "WhatsApp Plus",
                downloads: "125.3k",
                rating: "4.9"
            }, {
                name: "Free Fire",
                downloads: "98.7k",
                rating: "4.3"
            }, {
                name: "Spotify Premium",
                downloads: "87.2k",
                rating: "4.9"
            }, {
                name: "GTA San Andreas",
                downloads: "76.5k",
                rating: "4.8"
            }, {
                name: "Instagram Plus",
                downloads: "65.8k",
                rating: "4.5"
            }],
            month: [{
                name: "Free Fire",
                downloads: "450.2k",
                rating: "4.3"
            }, {
                name: "WhatsApp Plus",
                downloads: "380.7k",
                rating: "4.9"
            }, {
                name: "PUBG Mobile",
                downloads: "320.1k",
                rating: "4.5"
            }, {
                name: "Spotify Premium",
                downloads: "290.5k",
                rating: "4.9"
            }, {
                name: "Call of Duty",
                downloads: "250.8k",
                rating: "4.6"
            }],
            all: [{
                name: "WhatsApp Plus",
                downloads: "2.1M",
                rating: "4.9"
            }, {
                name: "Free Fire",
                downloads: "1.8M",
                rating: "4.3"
            }, {
                name: "PUBG Mobile",
                downloads: "1.5M",
                rating: "4.5"
            }, {
                name: "Spotify Premium",
                downloads: "1.2M",
                rating: "4.9"
            }, {
                name: "GTA San Andreas",
                downloads: "980k",
                rating: "4.8"
            }]
        },
        o = n[e] || n.week;
    t.forEach((e, t) => {
        if (o[t]) {
            const n = e.querySelector("h3"),
                a = e.querySelector(".download-stats span:first-child"),
                r = e.querySelector(".download-stats span:last-child");
            n && (n.textContent = o[t].name), a && (a.innerHTML = `<i class="fas fa-download"></i> ${o[t].downloads}`), r && (r.innerHTML = `<i class="fas fa-star"></i> ${o[t].rating}`)
        }
    })
}

function showDownloadModal(e) {
    const t = document.createElement("div");
    t.className = "modal-overlay", t.innerHTML = `\n        <div class="modal">\n            <div class="modal-header">\n                <h3>Confirm Download</h3>\n                <button class="modal-close">&times;</button>\n            </div>\n            <div class="modal-body">\n                <p>Are you sure you want to download <strong>${e}</strong>?</p>\n                <div class="modal-actions">\n                    <button class="btn-cancel">Cancel</button>\n                    <button class="btn-confirm">Download</button>\n                </div>\n            </div>\n        </div>\n    `;
    document.head.insertAdjacentHTML("beforeend", "\n        <style>\n        .modal-overlay {\n            position: fixed;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background: rgba(0,0,0,0.5);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            z-index: 10000;\n            animation: fadeIn 0.3s ease;\n        }\n        \n        .modal {\n            background: white;\n            border-radius: 15px;\n            padding: 0;\n            max-width: 400px;\n            width: 90%;\n            animation: slideIn 0.3s ease;\n        }\n        \n        .modal-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            padding: 1.5rem;\n            border-bottom: 1px solid #eee;\n        }\n        \n        .modal-header h3 {\n            margin: 0;\n            color: #333;\n        }\n        \n        .modal-close {\n            background: none;\n            border: none;\n            font-size: 1.5rem;\n            cursor: pointer;\n            color: #666;\n        }\n        \n        .modal-body {\n            padding: 1.5rem;\n        }\n        \n        .modal-actions {\n            display: flex;\n            gap: 1rem;\n            margin-top: 1.5rem;\n        }\n        \n        .btn-cancel, .btn-confirm {\n            flex: 1;\n            padding: 0.75rem 1rem;\n            border: none;\n            border-radius: 8px;\n            font-weight: 500;\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n        \n        .btn-cancel {\n            background: #f8f9fa;\n            color: #666;\n        }\n        \n        .btn-cancel:hover {\n            background: #e9ecef;\n        }\n        \n        .btn-confirm {\n            background: linear-gradient(135deg, #2563eb 0%, #7c3aed 100%);\n            color: white;\n        }\n        \n        .btn-confirm:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(37, 99, 235, 0.4);\n        }\n        \n        @keyframes fadeIn {\n            from { opacity: 0; }\n            to { opacity: 1; }\n        }\n        \n        @keyframes slideIn {\n            from { transform: translateY(-50px); opacity: 0; }\n            to { transform: translateY(0); opacity: 1; }\n        }\n        </style>\n    "), document.body.appendChild(t);
    const n = t.querySelector(".modal-close"),
        o = t.querySelector(".btn-cancel"),
        a = t.querySelector(".btn-confirm"),
        r = () => {
            t.remove()
        };
    n.addEventListener("click", r), o.addEventListener("click", r), a.addEventListener("click", () => {
        a.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Downloading...', a.disabled = !0, setTimeout(() => {
            alert(`Download started for ${e}!`), r()
        }, 2e3)
    }), t.addEventListener("click", e => {
        e.target === t && r()
    })
}

function showUpdateModal(e) {
    const t = event.target,
        n = t.textContent;
    t.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...', t.disabled = !0, setTimeout(() => {
        t.innerHTML = '<i class="fas fa-check"></i> Updated', t.style.background = "#10b981", setTimeout(() => {
            t.innerHTML = n, t.disabled = !1, t.style.background = ""
        }, 2e3)
    }, 3e3)
}

function showAppInfo(e, t, n, o, a) {
    const r = document.createElement("div");
    r.className = "modal-overlay", r.innerHTML = `\n        <div class="modal">\n            <div class="modal-header">\n                <h3>App Information</h3>\n                <button class="modal-close">&times;</button>\n            </div>\n            <div class="modal-body">\n                <div class="app-info-detail">\n                    <h4>${e}</h4>\n                    <p><strong>Category:</strong> ${t}</p>\n                    <p><strong>Rating:</strong> ${n}</p>\n                    <p><strong>Version:</strong> ${a}</p>\n                    <p><strong>Size:</strong> ${o}</p>\n                    <p><strong>Requirements:</strong> Android 5.0+</p>\n                    <div class="app-features">\n                        <h5>MOD Features:</h5>\n                        <ul>\n                            <li>Unlocked all premium features</li>\n                            <li>No advertisements</li>\n                            <li>Unlimited usage</li>\n                            <li>Custom themes</li>\n                            <li>Enhanced performance</li>\n                        </ul>\n                    </div>\n                </div>\n                <div class="modal-actions">\n                    <button class="btn-close">Close</button>\n                </div>\n            </div>\n        </div>\n    `, document.body.appendChild(r);
    const s = r.querySelector(".modal-close"),
        l = r.querySelector(".btn-close"),
        i = () => {
            r.remove()
        };
    s.addEventListener("click", i), l.addEventListener("click", i), r.addEventListener("click", e => {
        e.target === r && i()
    })
}
menuToggle && nav && menuToggle.addEventListener("click", () => {
    nav.classList.toggle("active"), menuToggle.classList.toggle("active");
    menuToggle.querySelectorAll("span").forEach((e, t) => {
        menuToggle.classList.contains("active") ? (0 === t && (e.style.transform = "rotate(45deg) translate(5px, 5px)"), 1 === t && (e.style.opacity = "0"), 2 === t && (e.style.transform = "rotate(-45deg) translate(7px, -6px)")) : (e.style.transform = "none", e.style.opacity = "1")
    })
}), searchBtn && searchInput && searchBtn.addEventListener("click", () => {
    const e = searchInput.value.trim();
    e && performSearch(e)
}), searchInput && searchInput.addEventListener("keypress", e => {
    if ("Enter" === e.key) {
        const e = searchInput.value.trim();
        e && performSearch(e)
    }
}), navLinks.forEach(e => {
    e.addEventListener("click", t => {
        if (t.preventDefault(), navLinks.forEach(e => e.classList.remove("active")), e.classList.add("active"), nav && nav.classList.contains("active") && (nav.classList.remove("active"), menuToggle && menuToggle.classList.remove("active"), menuToggle)) {
            menuToggle.querySelectorAll("span").forEach(e => {
                e.style.transform = "none", e.style.opacity = "1"
            })
        }
        const n = e.getAttribute("href");
        if (n && "#" !== n) {
            const e = document.querySelector(n);
            e && e.scrollIntoView({
                behavior: "smooth",
                block: "start"
            })
        }
    })
}), tabBtns.forEach(e => {
    e.addEventListener("click", () => {
        const t = e.getAttribute("data-tab"),
            n = e.closest("section");
        n.querySelectorAll(".tab-btn").forEach(e => e.classList.remove("active")), e.classList.add("active"), n.classList.contains("featured-games") ? filterGames(t) : n.classList.contains("featured-apps") && filterApps(t)
    })
}), filterBtns.forEach(e => {
    e.addEventListener("click", () => {
        const t = e.getAttribute("data-filter");
        filterBtns.forEach(e => e.classList.remove("active")), e.classList.add("active"), filterDownloads(t)
    })
}), downloadBtns.forEach(e => {
    e.addEventListener("click", t => {
        t.preventDefault();
        showDownloadModal(e.closest(".app-card, .game-card").querySelector(".app-name, .game-name").textContent)
    })
}), updateBtns.forEach(e => {
    e.addEventListener("click", t => {
        t.preventDefault();
        showUpdateModal(e.closest(".update-item").querySelector("h3").textContent)
    })
}), infoBtns.forEach(e => {
    e.addEventListener("click", t => {
        t.preventDefault();
        const n = e.closest(".app-card, .game-card");
        showAppInfo(n.querySelector(".app-name, .game-name").textContent, n.querySelector(".app-category, .game-category").textContent, n.querySelector(".rating-text").textContent, n.querySelector(".app-size, .game-size").textContent, n.querySelector(".app-version, .game-version").textContent)
    })
}), document.querySelectorAll(".quick-download").forEach(e => {
    e.addEventListener("click", t => {
        t.preventDefault(), t.stopPropagation();
        e.closest(".app-card, .game-card").querySelector(".app-name, .game-name").textContent;
        e.innerHTML = '<i class="fas fa-spinner fa-spin"></i>', e.disabled = !0, setTimeout(() => {
            e.innerHTML = '<i class="fas fa-check"></i>', e.style.background = "#10b981", setTimeout(() => {
                e.innerHTML = '<i class="fas fa-download"></i>', e.disabled = !1, e.style.background = ""
            }, 2e3)
        }, 1500)
    })
}), document.querySelectorAll('a[href^="#"]').forEach(e => {
    e.addEventListener("click", function(e) {
        e.preventDefault();
        const t = this.getAttribute("href");
        if (t && "#" !== t) {
            const e = document.querySelector(t);
            e && e.scrollIntoView({
                behavior: "smooth",
                block: "start"
            })
        }
    })
}), window.addEventListener("scroll", () => {
    const e = document.querySelector(".header");
    e && (window.scrollY > 100 ? (e.style.background = "rgba(37, 99, 235, 0.95)", e.style.backdropFilter = "blur(10px)") : (e.style.background = "var(--bg-primary)", e.style.backdropFilter = "none"))
});
const observerOptions = {
        threshold: .1,
        rootMargin: "0px 0px -50px 0px"
    },
    observer = new IntersectionObserver(e => {
        e.forEach(e => {
            e.isIntersecting && (e.target.style.opacity = "1", e.target.style.transform = "translateY(0)")
        })
    }, observerOptions),
    searchSuggestions = ["WhatsApp Plus", "PUBG Mobile", "Spotify Premium", "Free Fire", "Instagram Plus", "TikTok Mod", "YouTube Premium", "Netflix Mod", "GTA San Andreas", "Minecraft", "Call of Duty", "Among Us"];

function showSearchSuggestions(e) {
    let t = document.getElementById("searchSuggestions");
    t && (t.innerHTML = e.map(e => `<div class="suggestion-item">${e}</div>`).join(""), t.style.display = "block", t.querySelectorAll(".suggestion-item").forEach(e => {
        e.addEventListener("click", () => {
            searchInput && (searchInput.value = e.textContent), hideSearchSuggestions(), performSearch(e.textContent)
        })
    }))
}

function hideSearchSuggestions() {
    const e = document.getElementById("searchSuggestions");
    e && (e.style.display = "none")
}
searchInput && searchInput.addEventListener("input", e => {
    const t = e.target.value.toLowerCase();
    if (t.length > 2) {
        const e = searchSuggestions.filter(e => e.toLowerCase().includes(t));
        e.length > 0 ? showSearchSuggestions(e) : hideSearchSuggestions()
    } else hideSearchSuggestions()
}), document.querySelectorAll(".category-card").forEach(e => {
    e.addEventListener("mouseenter", () => {
        e.style.transform = "translateY(-10px) scale(1.02)"
    }), e.addEventListener("mouseleave", () => {
        e.style.transform = "translateY(0) scale(1)"
    })
}), document.querySelectorAll(".app-card, .game-card").forEach(e => {
    e.addEventListener("mouseenter", () => {
        e.style.transform = "translateY(-5px) scale(1.02)"
    }), e.addEventListener("mouseleave", () => {
        e.style.transform = "translateY(0) scale(1)"
    })
}), document.querySelectorAll(".btn-primary, .btn-secondary").forEach(e => {
    e.addEventListener("click", t => {
        if (t.preventDefault(), e.classList.contains("btn-primary")) {
            const e = document.querySelector(".featured-games");
            e && e.scrollIntoView({
                behavior: "smooth",
                block: "start"
            })
        } else {
            const e = document.querySelector(".featured-apps");
            e && e.scrollIntoView({
                behavior: "smooth",
                block: "start"
            })
        }
    })
});
const searchForm = document.getElementById("search-form"),
    searchClose = document.getElementById("search-close");
searchOpen && searchOpen.addEventListener("click", () => {
    showSearchForm()
}), searchClose && searchClose.addEventListener("click", e => {
    hideSearchForm()
}), document.addEventListener("keydown", e => {
    if ("Escape" === e.key) {
        searchForm && searchForm.classList.contains("active") && hideSearchForm();
        document.querySelectorAll(".sidenav.sidenav-open").forEach(e => {
            const t = e.id;
            hideSidenav(e, document.querySelector(`.sidenav-overlay[data-target="${t}"]`))
        })
    }
});
const sidenavTriggers = document.querySelectorAll(".sidenav-trigger"),
    sidenavOverlays = document.querySelectorAll(".sidenav-overlay");

function showSidenav(e, t) {
    e && (e.classList.add("sidenav-open"), t && t.classList.add("sidenav-overlay-open"), document.body.style.overflow = "hidden")
}

function hideSidenav(e, t) {
    e && (e.classList.remove("sidenav-open"), t && t.classList.remove("sidenav-overlay-open"), document.body.style.overflow = "")
}

function showSearchForm() {
    if (searchForm) {
        searchForm.classList.add("active");
        const e = searchForm.querySelector('input[type="search"]');
        e && e.focus()
    }
}

function hideSearchForm() {
    searchForm && searchForm.classList.remove("active")
}
sidenavTriggers.forEach(e => {
    e.addEventListener("click", t => {
        t.preventDefault();
        const n = e.getAttribute("data-target"),
            o = document.getElementById(n),
            a = document.querySelector(`.sidenav-overlay[data-target="${n}"]`);
        o && showSidenav(o, a)
    })
}), sidenavOverlays.forEach(e => {
    e.addEventListener("click", t => {
        const n = e.getAttribute("data-target");
        hideSidenav(document.getElementById(n), e)
    })
}), clickableLinks.forEach(e => {
    e.addEventListener("click", t => {
        menuItems.forEach(e => e.classList.remove("menu-item__active"));
        const n = e.querySelector(".menu-item");
        n && n.classList.add("menu-item__active")
    })
});
let currentSlide = 0;
const slides = document.querySelectorAll(".hero-slide"),
    dots = document.querySelectorAll(".dot");
let slideInterval;

function showSlide(e) {
    slides.forEach((t, n) => {
        t.classList.toggle("active", n === e)
    }), dots.forEach((t, n) => {
        t.classList.toggle("active", n === e)
    })
}

function nextSlide() {
    currentSlide = (currentSlide + 1) % slides.length, showSlide(currentSlide)
}

function prevSlide() {
    currentSlide = (currentSlide - 1 + slides.length) % slides.length, showSlide(currentSlide)
}

function startAutoSlide() {
    slideInterval = setInterval(nextSlide, 5e3)
}

function stopAutoSlide() {
    clearInterval(slideInterval)
}

function initializeHeroSlider() {
    if (slides.length > 0) {
        showSlide(0), startAutoSlide(), dots.forEach((e, t) => {
            e.addEventListener("click", () => {
                currentSlide = t, showSlide(currentSlide), stopAutoSlide(), startAutoSlide()
            })
        });
        const e = document.querySelector(".hero-slider");
        e && (e.addEventListener("mouseenter", stopAutoSlide), e.addEventListener("mouseleave", startAutoSlide))
    }
}

function initUnfoldTable() {
    const e = document.getElementById("unfold-table"),
        t = document.querySelectorAll(".collapse-row");
    if (!e || 0 === t.length) return;
    t.forEach(e => {
        e.removeAttribute("style"), e.classList.remove("active")
    });
    let n = !1;
    e.addEventListener("click", function() {
        n = !n, t.forEach(e => {
            n ? e.classList.add("active") : e.classList.remove("active")
        });
        const o = e.querySelector(".svg-icon svg path");
        o && (n ? o.setAttribute("d", "M480-544.23 280-344.23q-8.92 8.92-21.19 8.8-12.27-.11-21.58-9.42-8.69-9.31-8.38-21.38.3-12.08 9-20.77l221.77-221.77q9.31-9.31 21.38-9.31 12.08 0 21.38 9.31L703.77-395.42q8.69 8.69 9 20.77.3 12.08-8.38 21.38-9.31 9.31-21.38 9.31-12.08 0-21.38-9.31L480-544.23Z") : o.setAttribute("d", "M249.23-420q-24.75 0-42.37-17.63-17.63-17.62-17.63-42.37 0-24.75 17.63-42.37Q224.48-540 249.23-540q24.75 0 42.38 17.63 17.62 17.62 17.62 42.37 0 24.75-17.62 42.37Q273.98-420 249.23-420ZM480-420q-24.75 0-42.37-17.63Q420-455.25 420-480q0-24.75 17.63-42.37Q455.25-540 480-540q24.75 0 42.37 17.63Q540-504.75 540-480q0 24.75-17.63 42.37Q504.75-420 480-420Zm230.77 0q-24.75 0-42.38-17.63-17.62-17.62-17.62-42.37 0-24.75 17.62-42.37Q686.02-540 710.77-540q24.75 0 42.37 17.63 17.63 17.62 17.63 42.37 0 24.75-17.63 42.37Q735.52-420 710.77-420Z"))
    })
}

function initGoBack() {
    const e = document.getElementById("go-back");
    e && e.addEventListener("click", function(e) {
        e.preventDefault(), window.history.length > 1 ? window.history.back() : window.location.href = "/"
    })
}

function initTableOfContents() {
    const e = document.getElementById("toc-trigger"),
        t = document.getElementById("table-of-content");
    e && t && (generateTableOfContents(), e.addEventListener("click", function() {
        t.hasAttribute("open") ? (t.removeAttribute("open"), e.textContent = "Show Contents") : (t.setAttribute("open", ""), e.textContent = "Hide Contents")
    }))
}

function generateTableOfContents() {
    console.log("Starting TOC generation...");
    const e = document.getElementById("table-of-content");
    if (!e) return void console.log("TOC container not found");
    let t = document.querySelector(".entry-block.entry-content.main-entry-content");
    if (t || (t = document.querySelector(".entry-content")), t || (t = document.querySelector(".main-entry-content")), t || (t = document.querySelector(".entry-block")), !t) return void console.log("Content container not found");
    console.log("Found content container:", t.className);
    const n = t.querySelectorAll("h1, h2, h3, h4, h5, h6");
    if (console.log("Found headings:", n.length), 0 === n.length) return void console.log("No headings found in content");
    const o = e.querySelector("ul");
    if (!o) return void console.log("TOC list not found");
    o.innerHTML = "";
    let a = 0,
        r = [0, 0, 0, 0, 0, 0];
    n.forEach((e, t) => {
        if (e.closest(".recommended-section, .recommended-for-you, .related-posts")) return void console.log("Skipping heading in recommended section:", e.textContent);
        e.id || (e.id = `heading-${t}`);
        const n = document.createElement("li"),
            s = parseInt(e.tagName.charAt(1));
        r[s - 1]++;
        for (let e = s; e < 6; e++) r[e] = 0;
        let l = "";
        for (let e = 0; e < s; e++) r[e] > 0 && (l && (l += "."), l += r[e]);
        n.style.marginLeft = 20 * (s - 1) + "px";
        const i = document.createElement("a");
        i.href = `#${e.id}`, i.innerHTML = `<span class="toc-number">${l}.</span> ${e.textContent.trim()}`, i.setAttribute("aria-label", `Jump to ${e.textContent.trim()}`), i.addEventListener("click", function(t) {
            t.preventDefault();
            const n = e.getBoundingClientRect().top + window.pageYOffset - 50;
            window.scrollTo({
                top: n,
                behavior: "smooth"
            })
        }), n.appendChild(i), o.appendChild(n), a++, console.log("Added heading:", e.textContent.trim(), "Level:", s, "Number:", l)
    }), console.log("TOC generated with", a, "items")
}
document.addEventListener("DOMContentLoaded", () => {
    console.log("DOM loaded, script is running!"), initializeHeroSlider(), "function" == typeof filterGames && filterGames("featured"), "function" == typeof filterApps && filterApps("featured"), "function" == typeof filterDownloads && filterDownloads("week"), initUnfoldTable(), setTimeout(() => {
        initTableOfContents()
    }, 100), initGoBack()
});