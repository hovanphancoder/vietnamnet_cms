###################################################################################################
# CMSFF-Nginx
# CMSFF-Nginx is a NGINX configuration to speedup your CMSFF website with the cache plugin CMSFF
# Author: Alex Watson
# Maintainer: FlashCms.net
# URL: https://github.com/cmsfullform/nginx
#
# Tested with CMSFF version: 2.1.0
# Tested with NGINX: 1.25.2 (mainline)
#
# Version 2.1.0
#
###################################################################################################
# Add debug information into header
set $cmsff_debug 0;
set $cache_root "$document_root";

if ($document_root ~* "^(.*)/public$") {
    set $cache_root "$1";
}

###################################################################################################
# Do not alter these values
#
set $cmsff_bypass          1;      # Should NGINX bypass CMSFF and call cache file directly ?
set $cmsff_encryption      "";     # Is GZIP accepted by client ?
set $cmsff_file            "";     # Filename to look for
set $cmsff_is_bypassed     "MISS"; # Header text added to check if the bypass worked or not. X-CMSFF-Nginx-Serving-Static header usage
set $cmsff_reason          "";     # Reason why cache file was not used
set $cmsff_https_prefix    "";     # HTTPS prefix for cached files
set $cmsff_mobile_prefix   "";     # Mobile prefix for mobile cache files
set $cmsff_is_https        0;      # HTTPS check
set $cmsff_dynamic         "";     # Dynamic value to add to cached filename
set $cmsff_device          "desktop";  # Device type (desktop or mobile)
set $cmsff_default_type   "text/html"; # Set default type is html or json

# Check Browser or Request supports WebP ?
if ($http_accept ~* "webp") {
    set $webp_suffix ".webp";
}

###################################################################################################
#CMSFF INIT CORS NGINX 
# CMSFF Step 1: Allow Cors Nginx, regex includes /vi/api, /api, ...
location ^~ /api/ {
    # ---- Header CORS all request api ----
    add_header 'Access-Control-Allow-Origin'      '*'     always;
    add_header 'Access-Control-Allow-Methods'     'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers'     'Authorization,Content-Type,Accept,Origin,User-Agent,Referer,X-Requested-With' always;
    add_header 'Access-Control-Allow-Credentials' 'true'  always;

    # ---- pre-flight ----
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Max-Age' 1728000;
        return 204;
    }
	try_files $uri$webp_suffix $uri $uri/ /index.php$is_args$args;
}
#CMSFF INIT THEMES & UPLOAD PATH 
# CMSFF Step 2: Fix Load Static file of Themes and Plugins.
location /themes {
  alias $cache_root/themes;
  access_log  off;
  expires     365d;
  add_header  Cache-Control "public, max-age=31536000, immutable";

  location ~* \.(png|jpe?g|gif)$ {
    add_header Vary Accept;
    gzip_static off;
    #brotli_static off;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate, immutable, stale-while-revalidate=86400, stale-if-error=604800";
    access_log off;
    expires 365d;
    try_files $uri$webp_suffix $uri =404;
  }
  location ~* \.(css|js|map|ico|woff2?|woff|ttf|eot|map|json|svg|webp|pdf|txt)$ {
    allow all;
  }
  location ~* \.*$ {
    deny all;
    return 403;
  }
  autoindex off;
}
location /plugins {
  alias $cache_root/plugins;
  access_log  off;
  expires     365d;
  add_header  Cache-Control "public, max-age=31536000, immutable";

  location ~* \.(png|jpe?g|gif)$ {
    add_header Vary Accept;
    gzip_static off;
    #brotli_static off;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate, immutable, stale-while-revalidate=86400, stale-if-error=604800";
    access_log off;
    expires 365d;
    try_files $uri$webp_suffix $uri =404;
  }
  location ~* \.(css|js|map|ico|woff2?|woff|ttf|eot|map|json|svg|webp|pdf|txt)$ {
    allow all;
  }
  location ~* \.*$ {
    deny all;
    return 403;
  }
  autoindex off;
}
# CMSFF Step 3: Fix Load Upload Files
location /uploads {
  alias $cache_root/writeable/uploads;
  access_log  off;
  expires     365d;
  add_header  Cache-Control "public, max-age=31536000, immutable";

  location ~* \.(png|jpe?g|gif)$ {
    add_header Vary Accept;
    gzip_static off;
    #brotli_static off;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate, immutable, stale-while-revalidate=86400, stale-if-error=604800";
    access_log off;
    expires 365d;
    try_files $uri$webp_suffix $uri =404;
  }
  location ~* \.(svg|webp|ico|pdf|zip|rar|doc|docx|xls|xlsx|ppt|pptx|txt)$ {
  	allow all;
  }
  location ~* \.*$ {
  	deny all;
  	return 403;
  }
  autoindex off;
}

# PAGE CACHE
#

set $cmsff_uri_path "";
if ($request_uri ~ "^([^?]*)(\?.*)?$") {
    set $cmsff_uri_path $1;
}

# Is Brotli accepted by client ?
#if ($http_accept_encoding ~ br) {
#	set $cmsff_encryption "";
#}
# Is GZIP accepted by client ?
if ($http_accept_encoding ~ gzip) {
    set $cmsff_encryption "_gzip";
}

# Is HTTPS request ?
if ($https = "on") { set $cmsff_is_https 1; } 
if ($http_x_forwarded_proto = "https") { set $cmsff_is_https 1; }
if ($http_front_end_https = "on") { set $cmsff_is_https 1; }
if ($http_x_forwarded_protocol = "https") { set $cmsff_is_https 1; }
if ($http_x_forwarded_ssl = "on") { set $cmsff_is_https 1; }
if ($http_x_url_scheme = "https") { set $cmsff_is_https 1; }
if ($http_forwarded ~ /proto=https/) { set $cmsff_is_https 1; }

if ($cmsff_is_https = "1") {
    set $cmsff_https_prefix "-https";
}

# Query strings to ignore
set $cmsff_args "";

# Query string to cache

# File/URL to return IF we must bypass CMSFF
# Desktop: index.html
# Gzip:    index.html_gzip
# HTTPS:   index-https.html
# Mobile:  index-mobile-https.html

# Convert query string to directory format if only contains allowed parameters
# Cacheable Query Parameters
# Build cache folder Path for $_GET['id'] field! 
if ($args ~* "(?:^|&)id=([^&]+)") {
    set $cmsff_args "${cmsff_args}id/$1/";
}
# Build cache folder Path for $_GET['limit'] field! 
if ($args ~* "(?:^|&)limit=([^&]+)") {
    set $cmsff_args "${cmsff_args}limit/$1/";
}
# Build cache folder Path for $_GET['order'] field! 
if ($args ~* "(?:^|&)order=([^&]+)") {
    set $cmsff_args "${cmsff_args}order/$1/";
}
# Build cache folder Path for $_GET['orderby'] field! 
if ($args ~* "(?:^|&)orderby=([^&]+)") {
    set $cmsff_args "${cmsff_args}orderby/$1/";
}
# Build cache folder Path for $_GET['page'] field! 
if ($args ~* "(?:^|&)page=([^&]+)") {
    set $cmsff_args "${cmsff_args}page/$1/";
}
# Build cache folder Path for $_GET['paged'] field! 
if ($args ~* "(?:^|&)paged=([^&]+)") {
    set $cmsff_args "${cmsff_args}paged/$1/";
}
# Build cache folder Path for $_GET['sort'] field! 
if ($args ~* "(?:^|&)sort=([^&]+)") {
    set $cmsff_args "${cmsff_args}sort/$1/";
}
# Build cache folder Path for $_GET['sortby'] field! 
if ($args ~* "(?:^|&)sortby=([^&]+)") {
    set $cmsff_args "${cmsff_args}sortby/$1/";
}


# Set cache path with converted directory format
set $cmsff_pre_url "/writeable/cache/$http_host$cmsff_uri_path/$cmsff_args/";
set $cmsff_pre_file "$cache_root/writeable/cache/$http_host$cmsff_uri_path/$cmsff_args/";

# Mobile detection file path
set $cmsff_mobile_detection "$cmsff_pre_file/.mobile-active";

# Then check user agent with complete pattern matching
if ($http_user_agent ~* "(phone|windows\s+phone|ipod|ipad|blackberry|(?:android|bb\d+|meego|silk|googlebot) .+? mobile|palm|windows\s+ce|opera mini|avantgo|mobilesafari|docomo|kaios)") {
    set $cmsff_device "mobile";
}

# Set mobile prefix if mobile mode is activated
if (-f "$cmsff_mobile_detection") {
    set $cmsff_mobile_prefix "-mobile";
}
if ($cmsff_device != "mobile") {
    set $cmsff_mobile_prefix "";
}

# Setting cache file struct path 
set $cmsff_file_start "index$cmsff_mobile_prefix$cmsff_https_prefix";
set $cmsff_url "$cmsff_pre_url$cmsff_file_start$cmsff_dynamic.html";
set $cmsff_file "$cmsff_pre_file$cmsff_file_start$cmsff_dynamic.html";

# Check if gzip version cached file is available
if (-f "$cmsff_file$cmsff_encryption") {
    set $cmsff_file "$cmsff_file$cmsff_encryption";
    set $cmsff_url  "$cmsff_url$cmsff_encryption";
}

# Cookie check
if ($http_cookie ~* "(cmsff_logged|wp\-postpass_)") {
    set $cmsff_bypass 0;
    set $cmsff_is_bypassed "BYPASS";
    set $cmsff_reason "Cookie Not Caching";
}

# Enter list URI you want caching Nginx
set $should_cache "0";
# Include URI pattern: /
if ($request_uri = "/") {
    set $should_cache "1";
}
# Include URI pattern: ^/home/index/
if ($request_uri ~ "^/home/index/") {
    set $should_cache "1";
}
# Include URI pattern: ^.*/api/
if ($request_uri ~ "^.*/api/") {
    set $should_cache "1";
}
# Exclude URI pattern: ^.*/api/v1/auth/
if ($request_uri ~ "^.*/api/v1/auth/") {
    set $should_cache "0";
}
# Exclude URI pattern: ^/account/
if ($request_uri ~ "^/account/") {
    set $should_cache "0";
}


# Combine conditions into a single string
set $cmsff_cachelogin "$should_cache$cmsff_bypass";

# Final decision using single if with combined string
if ($cmsff_cachelogin = "11") {
    set $cmsff_bypass 1;
    set $cmsff_reason "$cmsff_url";
}

# Do not bypass if the cached file does not exist
if (!-f "$cmsff_file") {
    set $cmsff_bypass 0;
    set $cmsff_is_bypassed "MISS";
    set $cmsff_reason "Cached file not found";
}

# Do not bypass if it's a POST request
if ($request_method = POST) {
    set $cmsff_bypass 0;
    set $cmsff_is_bypassed "BYPASS";
    set $cmsff_reason "POST request";
}

# Maintenance mode
if (-f "$cache_root/.maintenance") {
    set $cmsff_bypass 0;
    set $cmsff_is_bypassed "BYPASS";
    set $cmsff_reason "Maintenance mode";
}

# If the bypass token is still on, let's bypass CMSFF with the cached URL
if ($cmsff_bypass = 1) {
    set $cmsff_is_bypassed "HIT";
    set $cmsff_reason "$cmsff_url";
}

# Clear variables if debug is not needed
if ($cmsff_debug = 0) {
    set $cmsff_reason "";
    set $cmsff_file "";
}

# If bypass token still on, rewrite
if ($cmsff_bypass = 1) {
    rewrite .* "$cmsff_url" last;
}

###################################################################################################
if ($request_uri ~ "/api/") {
    set $cmsff_default_type "application/json";
}

location /writeable/ {
    root "$cache_root";
    autoindex on;
    index index$cmsff_mobile_prefix$cmsff_https_prefix$cmsff_dynamic.html_gzip index$cmsff_mobile_prefix$cmsff_https_prefix$cmsff_dynamic.html index.html_gzip index.html;
}

# Add header to HTML cached files
location ~ /writeable/cache/.*html$ {
    root "$cache_root";
    etag on;
    add_header Vary "Accept-Encoding, Cookie";
    add_header Cache-Control "no-cache, no-store, must-revalidate";
    add_header X-CMSFF-Nginx-Serving-Static $cmsff_is_bypassed;
    add_header X-CMSFF-Nginx-Reason $cmsff_reason;
    add_header X-CMSFF-Nginx-File $cmsff_file;
    
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,Referer,X-Requested-With' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;

    # If request is OPTIONS, return 204
    if ($request_method = OPTIONS) {
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
    }
}
# Do not gzip cached files that are already gzipped
location ~ /writeable/cache/.*_gzip$ {
    root "$cache_root";
    types {}
    etag on;
    gzip off;
    #brotli off;
    #brotli_static off;
    if ($request_uri ~ "/api/") {
        set $cmsff_default_type "application/json";
    }
    add_header Content-Type $cmsff_default_type;
    add_header Content-Encoding gzip;
    add_header Vary "Accept-Encoding, Cookie";
    add_header Cache-Control "no-cache, no-store, must-revalidate";
    add_header X-CMSFF-Nginx-Serving-Static $cmsff_is_bypassed;
    add_header X-CMSFF-Nginx-Reason $cmsff_reason;
    add_header X-CMSFF-Nginx-File $cmsff_file;
    
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,Referer,X-Requested-With' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;

    # If request is OPTIONS, return 204
    if ($request_method = OPTIONS) {
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
    }
}

# Debug headers
add_header X-CMSFF-Nginx-Reason $cmsff_reason;
add_header X-CMSFF-Nginx-Serving-Static $cmsff_is_bypassed;
add_header X-CMSFF-Nginx-File $cmsff_file;

###################################################################################################
# BROWSER CSS CACHE
#
location ~* \.css$ {
    etag on;
    gzip_vary on;
    access_log  off;
    expires 45d;
}

###################################################################################################
# BROWSER JS CACHE
#
location ~* \.js$ {
    etag on;
    gzip_vary on;
    access_log  off;
    expires 45d;
}

###################################################################################################
# BROWSER MEDIA CACHE
location ~* \.(map|ico|gif|jpe?g|png|webp|svg|eot|otf|woff|woff2|ttf|ogg)$ {
    etag on;
    expires 45d;
    access_log  off;
    add_header Cache-Control "public";
}

# CMSFF Sync Caching State about NginxCache & CMSFF Cache
set $skip_cache 0;
if ($cmsff_bypass = 1){
    set $skip_cache 0;
}
if ($cmsff_bypass = 0){
    set $skip_cache 1;
}